package com.jmfoste2.audioplayer.suggestion;

import android.util.Log;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import org.apache.commons.io.IOUtils;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.List;

/**
 * A class for creating remote requests for suggestions based on
 * a query string.
 */
public class SearchSuggestionRequest {

    private static final String TAG = "SearchSuggestionRequest";
    private static final String BASE_SEARCH_SUGGESTION_URL = "http://suggestqueries.google.com/complete/search?client=firefox&ds=yt";

    /**
     * Constructs URL for request to retrieve suggestions for the specified query.
     *
     * @param query The query to retrieve suggestions for (must be non-empty).
     * @return The URL to request to retrieve suggestions for the specified query from.
     * @throws UnsupportedEncodingException
     */
    private static String buildURL(String query) throws UnsupportedEncodingException {
        return BASE_SEARCH_SUGGESTION_URL + "&q=" + URLEncoder.encode(query, "UTF-8");
    }

    /**
     * Retrieves a list of strings containing the suggestions for the
     * specified query.
     *
     * @param query The query to request suggestions for (must be non-empty).
     * @return A list of suggestions for the specified query.
     * @throws IOException
     */
    public static List<String> getSuggestions(String query) throws IOException {
        Log.d(TAG, "Retrieving suggestions for query:" + query);

        String json = getHTTPResponse(buildURL(query));

        // json data is of format ["myquery", ["suggestion1", "suggestion2", ..., "suggestionn"]]
        String jsonArray = json.substring(json.indexOf('[', 1), json.lastIndexOf(']'));

        List<String> suggestions = new Gson().fromJson(jsonArray, new TypeToken<List<String>>() {}.getType());
        return suggestions;
    }

    /**
     * Makes an HTTP request to the specified url
     * and returns the contents of the response as a string.
     *
     * @param url The url to request for a response from.
     * @return The response generated by a request to the specified url.
     * @throws IOException
     */
    public static String getHTTPResponse(String url) throws IOException {
        InputStream inputStream = null;
        try {
            URL httpURL = new URL(url);
            HttpURLConnection httpURLConnection = (HttpURLConnection) httpURL.openConnection();
            httpURLConnection.connect();
            inputStream = httpURLConnection.getInputStream();
            String response = IOUtils.toString(inputStream, "UTF-8");
            return response;
        } finally {
            if (inputStream != null) {
                inputStream.close();
            }
        }
    }
}
